
# relatively straightforward reverse proxy config but using
# some of the tricks and optimizations described at
# https://steemit.com/devops/@justinw/using-an-nginx-reverse-proxy-behind-an-elb-in-aws
# the rest is from http://nginx.org/en/docs/http/configuring_https_servers.html

worker_processes auto;

events {
  worker_connections 768;
}

http {
  # Nginx will handle gzip compression of responses from the app server
  gzip on;
  gzip_proxied any;
  gzip_types text/plain application/json;
  gzip_min_length 1000;

  # nginx logs and/or rate-limiting should get ip of user, not the load balancer
  real_ip_header X-Forwarded-For;

  # tell nginx who is allowed to tell us the real ip, i.e.
  # the load balancer, which will have an internal ip in this range
  set_real_ip_from ${VPC_CIDR};

  # only use TLS
  ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;

  # restrict what ciphers are allowed
  ssl_ciphers         HIGH:!aNULL:!MD5;

  # use session cache shared among all workers
  ssl_session_cache    shared:SSL:1m;

  server {
    listen 443 ssl;
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;

    location / {
      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # host/ip where the app is (host w/ be 'localhost' except in ?? situations)
      proxy_pass http://${APP_HOST}:${APP_PORT};

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
    }
  }
}
